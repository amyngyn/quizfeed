package quiz;

import java.security.*;
import java.util.Random;

public class User {
	private static final int SALT_LENGTH = 20;
	@SuppressWarnings("unused")
	private String username;
	private boolean isValidated;
	
	/**
	 * Returns a User object representing a user with the given username from
	 * the database. Must validate password to perform secure actions.
	 * Note: Use createUserAccount to create a new user. This constructor
	 * assumes the user already exists.
	 * 
	 * @param username The username of the account to fetch.
	 * @return a User object representing a User in the database.
	 */
	public User(String username) {
		this.username = username;
		isValidated = false;
		// TODO check if user exists in database
		throw new IllegalArgumentException(username + " does not exist in the database.");
	}
	
	/**
	 * 
	 * @param username
	 * @param passwordText
	 * @return
	 */
	public static User createUserAccount(String username, String passwordText) {
		//TODO check if user already exists and return null.
		
		String passwordHash = generateSaltedHash(passwordText, null);
		
		if (passwordHash == null) return null;

		// TODO insert username + passwordHash + passwordSalt into DB
		return new User(username);
	}
	
	@SuppressWarnings("unused")
	public boolean validateUser(String password) {
		if (isValidated) return true;
		String salt = null; // TODO get salt from database for this user
		String passwordHash = generateSaltedHash(password, salt);
		// TODO check passwordHash against what is stored for this user
		return false;
	}
	
	/**
	 * @param plaintext The text to hash.
	 * @param salt The salt to use. If null, this method will generate a new salt.
	 * @return A String representation of the plaintext bytes hashed with a salt.
	 */
	private static String generateSaltedHash(String plaintext, String salt) {
		if (salt == null)
			salt = generateSalt();
		
		try {
			MessageDigest md = MessageDigest.getInstance("SHA");
			md.update((plaintext + salt).getBytes());
			byte[] hash = md.digest();
			return hexToString(hash);
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			return null;
		}
	}
	
	/**
	 * Randomly generates a String representation of randomly generated bytes.
	 */
	private static String generateSalt() {
		byte[] salt = new byte[SALT_LENGTH];
		new Random().nextBytes(salt);
		return hexToString(salt);
	}
	
	/**
	 * Given a byte[] array, produces a hex String, such as "234a6f"
	 * with 2 chars for each byte in the array.
	 * (provided code from CS 108 hw4)
	 */ 
	private static String hexToString(byte[] bytes) { 
		StringBuffer buff = new StringBuffer(); 
		for (int i=0; i<bytes.length; i++) { 
			int val = bytes[i]; 
			val = val & 0xff;  // remove higher bits, sign 
			if (val<16) buff.append('0'); // leading 0 
			buff.append(Integer.toString(val, 16)); 
		} 
		return buff.toString(); 
	} 
}
