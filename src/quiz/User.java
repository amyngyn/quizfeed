package quiz;

import java.security.*;
import java.sql.*;
import java.util.Random;

public class User {
	private static final int SALT_LENGTH = 20;

	/**
	 * @param username
	 * @param passwordText
	 * @return
	 */
	public static boolean addUserToDatabase(String username, String passwordText) {
		Connection con = null;
		Statement existsStatement = null;
		ResultSet existsResult = null;
		Statement insertStatement = null;
		try {
			con = Database.openConnection();

			String existsQuery = "SELECT * FROM users WHERE name='" + username + "';";
			existsStatement = Database.getStatement(con);
			existsResult = existsStatement.executeQuery(existsQuery);
			if (existsResult.next()) return false;

			String salt = generateSalt();
			String passwordHash = generateSaltedHash(passwordText, salt);
			if (passwordHash == null) return false;
			
			String insertQuery = "INSERT INTO users (name, password, salt) VALUES ("
					+ "'" + username + "', "
					+ "'" + passwordHash + "', "
					+ "'" + salt + "');";
			insertStatement = Database.getStatement(con);
			insertStatement.execute(insertQuery);
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		} finally {
			Database.closeConnections(con, existsStatement, existsResult, insertStatement);
		}
	}

	public static int validateUser(String username, String passwordAttemptText) {
		Connection con = null;
		Statement statement = null;
		ResultSet rs = null;
		try {
			con = Database.openConnection();
			statement = Database.getStatement(con);
			
			String userQuery = "SELECT uID, password, salt FROM users WHERE UPPER(name) = UPPER('" + username + "');";
			rs = statement.executeQuery(userQuery);
			if (!rs.next()) return -1;
			int uID = rs.getInt("uID");
			String passwordInDatabase = rs.getString("password");
			String salt = rs.getString("salt");

			String passwordAttempt = generateSaltedHash(passwordAttemptText, salt);
			if (passwordInDatabase.equals(passwordAttempt)) {
				return uID;
			} else {
				return -1;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
		} finally {
			Database.closeConnections(con, statement, rs);
		}
	}

	/**
	 * @param plaintext The text to hash.
	 * @param salt The salt to use. If null, this method will not use a salt.
	 * @return A String representation of the plaintext bytes hashed with a salt.
	 */
	public static String generateSaltedHash(String plaintext, String salt) {
		if (salt == null)
			salt = "";
		
		try {
			MessageDigest md = MessageDigest.getInstance("SHA");
			md.update((plaintext + salt).getBytes());
			byte[] hash = md.digest();
			return hexToString(hash);
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * Randomly generates a String representation of randomly generated bytes.
	 */
	private static String generateSalt() {
		byte[] salt = new byte[SALT_LENGTH];
		new Random().nextBytes(salt);
		return hexToString(salt);
	}

	/**
	 * Given a byte[] array, produces a hex String, such as "234a6f"
	 * with 2 chars for each byte in the array.
	 * (provided code from CS 108 hw4)
	 */ 
	private static String hexToString(byte[] bytes) { 
		StringBuffer buff = new StringBuffer(); 
		for (int i=0; i<bytes.length; i++) { 
			int val = bytes[i]; 
			val = val & 0xff;  // remove higher bits, sign 
			if (val<16) buff.append('0'); // leading 0 
			buff.append(Integer.toString(val, 16)); 
		} 
		return buff.toString(); 
	} 
}
